/**
 * @file parser.hpp
 * @brief Declaration of the FParser class.
 */

#pragma once

// Include the interface for language statements
#include "ast/statement/interface/statement.hpp"

// Include the interface for expressions
#include "ast/expression/interface/expression.hpp"

// Forward declaration of FTokenizer class
class FTokenizer;

/**
 * @brief Represents a parser for the custom language.
 *
 * This class is responsible for parsing tokens generated by the tokenizer
 * into an abstract syntax tree (AST) representation of the program.
 */
class FParser final
{
    // Reference to the tokenizer used by the parser.
	FTokenizer& m_tokenizer;

public:

    /**
     * @brief Constructs a parser with the given tokenizer.
     * @param tokenizer The tokenizer to be used by the parser.
     */
    explicit FParser(FTokenizer& tokenizer);

    /**
     * @brief Parses the token stream and returns a list of statements.
     * @return A list of parsed statements.
     */
    StatementList Parse();

private:

    // Statement parsing functions
    StatementPtr ParseStatement();
    StatementPtr ParseAssignmentStatement();
    StatementPtr ParseVarDeclarationStatement();
    StatementPtr ParsePrintStatement();

    // Expression parsing functions
    ExpressionPtr ParseExpression();
    ExpressionPtr ParseArithmeticOperatorExpression(ExpressionPtr left);
    ExpressionPtr ParseStringOperatorExpression(ExpressionPtr left);
    ExpressionPtr ParseIdentifier();
    ExpressionPtr ParseNumber();
    ExpressionPtr ParseString();
    ExpressionPtr ParseTerm();
    ExpressionPtr ParseFactor();
};
