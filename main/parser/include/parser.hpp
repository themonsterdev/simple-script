/**
 * @file parser.hpp
 * @brief Declaration of the FParser class.
 */

#pragma once

// Include the interface for language statements
#include "statement/interface/statement.hpp"

// Include the interface for expressions
#include "expression/interface/expression.hpp"

// Include the expression parser header file
#include "expression_parser.hpp"

// Include the statement parser header file
#include "statement_parser.hpp"

// Forward declaration of FTokenizer class
class FTokenizer;

/**
 * @brief Represents a parser for the custom language.
 *
 * This class is responsible for parsing tokens generated by the tokenizer
 * into an abstract syntax tree (AST) representation of the program.
 */
class FParser final
{
    // Reference to the tokenizer used by the parser.
    FTokenizer& m_tokenizer;
    FExpressionParser m_expressionParser;
    FStatementParser m_statementParser;

public:

    /**
     * @brief Constructs a parser with the given tokenizer.
     * @param tokenizer The tokenizer to be used by the parser.
     */
    explicit FParser(FTokenizer& tokenizer);

    /**
     * @brief Parses the token stream and returns a list of statements.
     * @return A list of parsed statements.
     */
    StatementList Parse();
};
