/**
 * @file statement_parser.hpp
 * @brief Declaration of the FStatementParser class.
 */

// Ensure this file is included only once
#pragma once

 // Include the interface for language statements
#include "ast/statement/interface/statement.hpp"

// Include the interface for expressions
#include "ast/expression/interface/expression.hpp"

#include "parser/statement/interface/statement_rule.hpp"

// Forward declaration of FLexer class
class FLexer;
class FExpressionParser;

/**
 * @brief Parser class for language statements.
 *
 * This class is responsible for parsing tokens generated by the lexer
 * into statement objects representing different language constructs.
 */
class FStatementParser
{
    // Reference to the lexer used by the parser
    FLexer& m_lexer;

    // Reference to the statement parser used by the parser
    FExpressionParser& m_expressionParser;

    // Vector of statement rules
    StatementRuleVector m_rules;

public:

    /**
     * @brief Constructs a statement parser with the given lexer and expression parser.
     *
     * @param lexer The lexer to be used by the parser.
     * @param expressionParser The expression parser to be used by the parser.
     */
    explicit FStatementParser(FLexer& lexer, FExpressionParser& expressionParser);
    
    /**
     * @brief Parses the next statement from the token stream and returns a statement object.
     *
     * @return StatementPtr A pointer to the parsed statement object.
     */
    StatementPtr ParseStatement();
};
